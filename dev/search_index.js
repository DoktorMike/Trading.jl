var documenterSearchIndex = {"docs":
[{"location":"strategies/#Strategies","page":"Strategies","title":"Strategies","text":"","category":"section"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"As with any other functionality in Trading, Strategies are represented by Systems and thus are treated on completely equal footing with the core functionality. There are three main parts that need to be implemented for a Strategy to be used: the struct, the Overseer.update function, and the Overseer.requested_components function. This latter one will be used to determine which Indicator systems need to be running on the TickerLedgers in order to produce the Indicators that are used by the Strategy. The update function of a Strategy System is ran periodically after the update functions for the other Systems that make the rest of the Trader tick.","category":"page"},{"location":"strategies/#Example","page":"Strategies","title":"Example","text":"","category":"section"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"As an example we will implement a very simple slow/fast moving average strategy, i.e. SowFast. The goal is that we can later use it in our Trader in to following way:","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"trader = Trader(broker; strategies = [Strategy(:slowfast, [SlowFast()]) => [\"stock1\", \"stock2\"]),\n","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"julia struct SlowFast <: System end","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"Overseer.requested_components(::SlowFast) = (Trading.SMA{50, Trading.Close}, Trading.SMA{200, Trading.Close})","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"\nThese two lines define the `Strategy` type and signals that we want the `Trading.SMA{50, Trading.Close}, Trading.SMA{200, Trading.Close}` [`Indicators`](@ref) to be present in the [`TickerLedgers`](@ref).\n\nWe then implement the following `update` function that will be executed periodically:","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"julia function Overseer.update(s::SlowFast, t::Trader, tickerledgers::TickerLedger)     for tickerledger in tickerledgers         for e in newentities(tickerledger, s)             lage = lag(e, 1)","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"        if lag_e === nothing\n            continue\n        end\n        curpos = current_position(t, ticker)\n\n        sma_50  = e[SMA{50, Close}].sma\n        sma_200 = e[SMA{200, Close}].sma\n        \n        lag_sma_50 = lag_e[SMA{50, Close}].sma\n        lag_sma_200 = lag_e[SMA{200, Close}].sma\n\n        if sma_50 > sma_200 && lag_sma_50 < lag_sma_200\n            Entity(t, Sale(ticker, 1.0))\n        elseif sma_50 < sma_200 && lag_sma_50 > lag_sma_200\n            Entity(t, Purchase(ticker, 1.0))\n        end\n    end\nend","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"end ```","category":"page"},{"location":"strategies/","page":"Strategies","title":"Strategies","text":"For each of the","category":"page"},{"location":"data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"data/#Historical-Acquisition","page":"Data","title":"Historical Acquisition","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"The current suggested method of historical data acquisition is through the AlpacaBroker. There are three types of data that can be retrieved: bars, quotes and trades.","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"bars\nquotes\ntrades","category":"page"},{"location":"data/#Trading.bars","page":"Data","title":"Trading.bars","text":"bars(broker, ticker, start, stop; timeframe, kwargs...)\n\nRetrieve the bar data for ticker from start to stop and with an interval of timeframe. When using AlpacaBroker see the Bar Object documentation for further reference.\n\nExample\n\nbroker = AlpacaBroker(<key_id>, <secret_key>)\n\nbars(broker, \"AAPL\", DateTime(\"2022-01-01T00:00:00\"), DateTime(\"2023-01-01T00:00:00\")l timeframe = Minute(1))\n\nThe above will retrieve 2022 bar data \"AAPL\" on a Minute resolution. \n\n\n\n\n\n","category":"function"},{"location":"data/#Trading.quotes","page":"Data","title":"Trading.quotes","text":"quotes(broker, ticker, start, stop)\n\nReturns the quotes made for ticker between start and stop. When using AlpacaBroker see the Quote Object documentation for further reference.\n\nExample\n\nbroker = AlpacaBroker(<key_id>, <secret_key>)\n\nquotes(broker, \"AAPL\", DateTime(\"2022-01-01T14:30:00\"), DateTime(\"2022-01-01T14:31:00\"))\n\n\n\n\n\n","category":"function"},{"location":"data/#Trading.trades","page":"Data","title":"Trading.trades","text":"trades(broker, ticker, start, stop)\n\nReturns the trades made for ticker between start and stop. When using AlpacaBroker see the Trade Object documentation for further reference.\n\nExample\n\nbroker = AlpacaBroker(<key_id>, <secret_key>)\n\ntrades(broker, \"AAPL\", DateTime(\"2022-01-01T14:30:00\"), DateTime(\"2022-01-01T14:31:00\"))\n\n\n\n\n\n","category":"function"},{"location":"data/","page":"Data","title":"Data","text":"Each of these will return a TimeArray, which can be used e.g. with MarketTechnicals for specialized analysis. An AbstractBroker has an internal cache that will retain previously requested data.","category":"page"},{"location":"data/#Data-Stream","page":"Data","title":"Data Stream","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"There are realtime data streams for bars and portfolio/order updates. They follow the same semantics as the standard HTTP.WebSockets.WebSocket.","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"Trading.BarStream\nTrading.bar_stream","category":"page"},{"location":"data/#Trading.BarStream","page":"Data","title":"Trading.BarStream","text":"BarStream\n\nSupplies a stream of bars from a broker. Can be created by calling bar_stream on an AbstractBroker. See receive and register! for more information.\n\n\n\n\n\n","category":"type"},{"location":"data/","page":"Data","title":"Data","text":"Trading.OrderStream\nTrading.order_stream","category":"page"},{"location":"data/#Trading.OrderStream","page":"Data","title":"Trading.OrderStream","text":"OrderStream\n\nInterface to support executing trades and retrieving account updates.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.order_stream","page":"Data","title":"Trading.order_stream","text":"order_stream(f::Function, broker::AbstractBroker)\n\nCreates an OrderStream to stream order data. Uses the same semantics as a standard HTTP.WebSocket.\n\nExample\n\nbroker = AlpacaBroker(<key_id>, <secret_key>)\n\norder_stream(broker) do stream\n    order = receive(stream)\nend\n\n\n\n\n\n","category":"function"},{"location":"data/#Ticker-Ledgers","page":"Data","title":"Ticker Ledgers","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Trading.TickerLedger","category":"page"},{"location":"data/#Trading.TickerLedger","page":"Data","title":"Trading.TickerLedger","text":"TickerLedger\n\nA TickerLedger holds the data for a given ticker as it arrives. Currently this is bar data in the form of Open, High, Low, Close and Volume, produced by a BarStream. If certain derived Indicator data is requested, it also holds this as it is produced by the different systems.\n\n\n\n\n\n","category":"type"},{"location":"data/#Bars","page":"Data","title":"Bars","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Trading.Open\nTrading.High\nTrading.Low\nTrading.Close\nTrading.Volume","category":"page"},{"location":"data/#Trading.Open","page":"Data","title":"Trading.Open","text":"Open\n\nThe opening price of a given bar.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.High","page":"Data","title":"Trading.High","text":"High\n\nThe highest price of a given bar.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Low","page":"Data","title":"Trading.Low","text":"Low\n\nThe lowest price of a given bar.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Close","page":"Data","title":"Trading.Close","text":"Close\n\nThe closing price of a given bar.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Volume","page":"Data","title":"Trading.Volume","text":"Volume\n\nThe traded volume of a given bar.\n\n\n\n\n\n","category":"type"},{"location":"data/#Indicators","page":"Data","title":"Indicators","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Indicator data is generated from incoming bar data by the indicator systems as requested by the Strategy systems. Most of them have two type parameters designating the window or horizon of the indicator. For example the SMA{20, Close} closing price simple moving average indicator shows at a given timestamp the average of the closing prices of the 20 previous bars.","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"Accessing this data can be done through a Trader, e.g.:","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"trader = Trader(broker, tickers=[\"MSFT\"])\n\ntrader[\"MSFT\"][Trading.SMA{20, Trading.Close}]","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"provided that it was generated. See Strategies for more information.","category":"page"},{"location":"data/#Data-2","page":"Data","title":"Data","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Trading.SMA\nTrading.MovingStdDev\nTrading.EMA\nTrading.RSI\nTrading.Bollinger\nTrading.Sharpe","category":"page"},{"location":"data/#Trading.SMA","page":"Data","title":"Trading.SMA","text":"SMA{horizon, T}\n\nThe simple moving average of a value over a timeframe of horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.MovingStdDev","page":"Data","title":"Trading.MovingStdDev","text":"MovingStdDev{horizon, T}\n\nThe moving standard deviation of a value over timeframe of horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.EMA","page":"Data","title":"Trading.EMA","text":"EMA{horizon, T}\n\nThe exponential moving average of a value over timeframe of horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.RSI","page":"Data","title":"Trading.RSI","text":"RSI{horizon, T}\n\nThe relative strength index of a value over timeframe of horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Bollinger","page":"Data","title":"Trading.Bollinger","text":"Bollinger{horizon, T}\n\nThe up and down Bollinger bands for a value, over a timeframe of horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Sharpe","page":"Data","title":"Trading.Sharpe","text":"Sharpe{horizon, T}\n\nThe sharpe ratio of a value over a timeframe horizon.\n\n\n\n\n\n","category":"type"},{"location":"data/#Systems-(@id-indicator_systems)","page":"Data","title":"Systems (@id indicator_systems)","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Trading.SMACalculator\nTrading.MovingStdDevCalculator\nTrading.EMACalculator\nTrading.RSICalculator\nTrading.BollingerCalculator\nTrading.SharpeCalculator","category":"page"},{"location":"data/#Trading.SMACalculator","page":"Data","title":"Trading.SMACalculator","text":"SMACalculator\n\nCalculates the SMA of data.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.MovingStdDevCalculator","page":"Data","title":"Trading.MovingStdDevCalculator","text":"MovingStdDevCalculator\n\nCalculates the MovingStdDev of data.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.EMACalculator","page":"Data","title":"Trading.EMACalculator","text":"EMACalculator\n\nCalculates the EMA of data.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.RSICalculator","page":"Data","title":"Trading.RSICalculator","text":"RSICalculator\n\nCalculates the RSI of values.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.BollingerCalculator","page":"Data","title":"Trading.BollingerCalculator","text":"BollingerCalculator\n\nCalculates the Bollinger bands for data. The width parameter can be tuned, by default it is 2.0.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.SharpeCalculator","page":"Data","title":"Trading.SharpeCalculator","text":"SharpeCalculator\n\nCalculates the bare Sharpe ratio of data.\n\n\n\n\n\n","category":"type"},{"location":"data/#General-Data","page":"Data","title":"General Data","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Trading.LogVal\nTrading.Difference\nTrading.RelativeDifference\n\nTrading.LogValCalculator\nTrading.DifferenceCalculator\nTrading.RelativeDifferenceCalculator","category":"page"},{"location":"data/#Trading.LogVal","page":"Data","title":"Trading.LogVal","text":"LogVal\n\nThe logarithm of a value.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.Difference","page":"Data","title":"Trading.Difference","text":"Difference\n\nThe lag 1 difference.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.RelativeDifference","page":"Data","title":"Trading.RelativeDifference","text":"RelativeDifference\n\nThe lag 1 relative difference.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.LogValCalculator","page":"Data","title":"Trading.LogValCalculator","text":"LogValCalculator\n\nCalculates the logarithms of data.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.DifferenceCalculator","page":"Data","title":"Trading.DifferenceCalculator","text":"DifferenceCalculator\n\nComputes the lag 1 differences of data values.\n\n\n\n\n\n","category":"type"},{"location":"data/#Trading.RelativeDifferenceCalculator","page":"Data","title":"Trading.RelativeDifferenceCalculator","text":"RelativeDifferenceCalculator\n\nCalculates the lag 1 RelativeDifference of data.\n\n\n\n\n\n","category":"type"},{"location":"#Trading","page":"Home","title":"Trading","text":"","category":"section"},{"location":"#Trader","page":"Home","title":"Trader","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trading.Trader","category":"page"},{"location":"#Trading.Trader","page":"Home","title":"Trading.Trader","text":"Trader(broker::AbstractBroker; strategies::Vector{Pair{String, Vector{Strategy}}}, start=current_time())\n\nHolds all data and tasks related to trading. \n\n\n\n\n\n","category":"type"},{"location":"#Brokers","page":"Home","title":"Brokers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trading.AbstractBroker\nTrading.AlpacaBroker\nTrading.HistoricalBroker\nTrading.MockBroker","category":"page"},{"location":"#Trading.AbstractBroker","page":"Home","title":"Trading.AbstractBroker","text":"AbstractBroker\n\nInterface for external brokers.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.AlpacaBroker","page":"Home","title":"Trading.AlpacaBroker","text":"AlpacaBroker\n\nBroker to communicate with Alpaca. Can be constructed with your key_id and secret_key (see connect-to-alpaca-api).\n\n\n\n\n\n","category":"type"},{"location":"#Trading.HistoricalBroker","page":"Home","title":"Trading.HistoricalBroker","text":"HistoricalBroker\n\nStores and provides data from historical datasets. Data can be streamed fashion by assigning a Clock to the clock constructor kwarg, which will be used to determine the next bar to stream when calling receive on this broker.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.MockBroker","page":"Home","title":"Trading.MockBroker","text":"MockBroker\n\nMimics all function of a normal broker but with random data.\n\n\n\n\n\n","category":"type"},{"location":"#Portfolio","page":"Home","title":"Portfolio","text":"","category":"section"},{"location":"#Data","page":"Home","title":"Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trading.Cash\nTrading.PurchasePower\nTrading.Position\nTrading.Purchase\nTrading.Sale\nTrading.Order\nTrading.Filled\nTrading.PortfolioSnapshot","category":"page"},{"location":"#Trading.Cash","page":"Home","title":"Trading.Cash","text":"Cash\n\nRepresents the actual cash balance. Currently there is no particular currency tied to this.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.PurchasePower","page":"Home","title":"Trading.PurchasePower","text":"PurchasePower\n\nRepresents the current purchasing power. This is updated at the start of each update cycle to the current value of the Cash singleton. It can thus be used to determine how many purchases/trades can be made during one cycle.  \n\n\n\n\n\n","category":"type"},{"location":"#Trading.Position","page":"Home","title":"Trading.Position","text":"Position\n\nRepresents a position held in an equity represented by ticker.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.Purchase","page":"Home","title":"Trading.Purchase","text":"Purchase(ticker, quantity;\n         type          = OrderType.Market,\n         time_in_force = TimeInForce.GTC,\n         price         = 0.0,\n         trail_percent = 0.0)\n\nThe local representation of a purchase order. This will be turned into an Order by the Purchaser System as soon as it's communicated to the broker.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.Sale","page":"Home","title":"Trading.Sale","text":"Sale(ticker, quantity;\n         type          = OrderType.Market,\n         time_in_force = TimeInForce.GTC,\n         price         = 0.0,\n         trail_percent = 0.0)\n\nThe local representation of a sell order. This will be turned into an Order by the Seller System as soon as it's communicated to the broker.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.Order","page":"Home","title":"Trading.Order","text":"Order\n\nRepresentation of a Purchase or Sale order that has been communicated to the broker. Once the status goes to \"filled\" the filling information will be taken by the Filler System to create a Filled component. \n\n\n\n\n\n","category":"type"},{"location":"#Trading.Filled","page":"Home","title":"Trading.Filled","text":"Filled\n\nRepresents the filled avg_price and quantity of an Order.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.PortfolioSnapshot","page":"Home","title":"Trading.PortfolioSnapshot","text":"PortfolioSnapshot\n\nA snapshot of the current Positions and Cash value of the portfolio.\n\n\n\n\n\n","category":"type"},{"location":"#Systems","page":"Home","title":"Systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Trading.Purchaser\nTrading.Seller\nTrading.Filler\nTrading.DayCloser\nTrading.SnapShotter","category":"page"},{"location":"#Trading.Purchaser","page":"Home","title":"Trading.Purchaser","text":"Purchaser\n\nHandles Purchases. Mainly verifies prices and quantities to be purchased.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.Seller","page":"Home","title":"Trading.Seller","text":"Seller\n\nHandles Sales.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.Filler","page":"Home","title":"Trading.Filler","text":"Filler\n\nWhen the status of an Order changes to \"filled\", the filled quantity and average fill price is  registered in a Filled Component.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.DayCloser","page":"Home","title":"Trading.DayCloser","text":"DayCloser([interval::Period = Minute(1)])\n\nCloses the day. Will run during the time interval [market_close - interval, market_close]. Currently it just removes pending trades.\n\n\n\n\n\n","category":"type"},{"location":"#Trading.SnapShotter","page":"Home","title":"Trading.SnapShotter","text":"SnapShotter([interval::Period = Minute(1)])\n\nTakes a PortfolioSnapshot after each interval, storing Positions, Cash, and total value.\n\n\n\n\n\n","category":"type"}]
}
